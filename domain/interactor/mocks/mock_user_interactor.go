// Code generated by MockGen. DO NOT EDIT.
// Source: user_interactor.go

// Package interactor is a generated GoMock package.
package interactor

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vicren/go-clean/domain/entity"
)

// MockUserInteractor is a mock of UserInteractor interface.
type MockUserInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockUserInteractorMockRecorder
}

// MockUserInteractorMockRecorder is the mock recorder for MockUserInteractor.
type MockUserInteractorMockRecorder struct {
	mock *MockUserInteractor
}

// NewMockUserInteractor creates a new mock instance.
func NewMockUserInteractor(ctrl *gomock.Controller) *MockUserInteractor {
	mock := &MockUserInteractor{ctrl: ctrl}
	mock.recorder = &MockUserInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInteractor) EXPECT() *MockUserInteractorMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockUserInteractor) List() ([]entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockUserInteractorMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserInteractor)(nil).List))
}
